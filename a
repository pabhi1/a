


############################## FCFS #####################################################
import java.util.Scanner; class Fcfs {
    public static void main(String args[]){ int bst[],process[],wt[],tat[],i,j,n,total=0,pos,temp; 
        float wait_avg, TAT_avg; 
        Scanner s = new Scanner(System.in); 
        System.out.print("Enter number of process: "); n = s.nextInt(); 
        process = new int[n]; bst = new int[n]; wt = new int[n]; tat = new int[n]; 
        System.out.println("\nEnter CPU time:");
        for(i=0;i<n;i++)
        {
            System.out.print("\nProcess["+(i+1)+"]: ");
            bst[i] = s.nextInt();;
            process[i]=i+1; //Process Number
        }
        System.out.println("\t\t\t**********FCFS Scheduling*********");
        //First process has 0 waiting time 
            wt[0]=0;
        //calculate waiting time 
            for(i=1;i<n;i++)
        {
            wt[i]=0; for(j=0;j<i;j++) wt[i]+=bst[j]; total+=wt[i];
        }
        //Calculating Average waiting time 
        wait_avg=(float)total/n;
        total=0;
        System.out.println("-----------------------------------------------------------------------");
        System.out.println("\nProcess\t\t| Burst Time \t\t|Waiting Time\t\t|Turn Around Time");
        System.out.println("-----------------------------------------------------------------------");
        for(i=0;i<n;i++)
        {
            tat[i]=bst[i]+wt[i];
            total+=tat[i];//Calculating TurnaroundTimetotal+=tat[i];
            System.out.println("\np"+process[i]+"\t\t|\t"+bst[i]+"\t\t|\t"+wt[i]+"\t\t|\t"+tat[i]);
            System.out.println("-----------------------------------------------------------------------");
        }//Calculation of Average Turnaround Time
        TAT_avg=(float)total/n;
        System.out.println("\n\nAverage Waiting Time: "+wait_avg);
        System.out.println("\nAverage Turnaround Time: "+TAT_avg);
    }
}


###################################### SJF ##########################################################################
import java.util.Scanner;
class SJF{
    public static void main(String args[])
    { 
        int burst_time[],process[],waiting_time[],tat[],i,j,n,total=0,pp,temp; float wait_avg,TAT_avg; 
        Scanner s = new Scanner(System.in);
        System.out.print("Enter number of process: ");
        n = s.nextInt(); process = new int[n]; burst_time = new int[n]; waiting_time = new int[n]; 
        tat = new int[n]; 
        System.out.println("\nEnter Burst time:"); 
        for(i=0;i<n;i++) 
        { 
            System.out.print("\nProcess["+(i+1)+"]: "); burst_time[i] = s.nextInt();; 
            process[i]=i+1; //Process Number 
        } 
        System.out.println("\n \t \t*************** Shortest Job First Scheduling*********");
        //Sorting 
        for(i=0;i<n;i++) 
        { 
            pp=i; 
            for(j=i+1;j<n;j++) 
            { 
                if(burst_time[j]<burst_time[pp]) 
                pp=j; 
            }
            temp = burst_time[i]; 
            burst_time[i]=burst_time[pp]; 
            burst_time[pp]=temp; 
            temp=process[i]; 
            process[i]=process[pp]; 
            process[pp]=temp; 
        } 
        //First process has 0 waiting time 
        waiting_time[0]=0; 
        //calculate waiting time 
        for(i=1;i<n;i++) 
        { 
            waiting_time[i]=0; for(j=0;j<i;j++) waiting_time[i]+=burst_time[j]; 
            total+=waiting_time[i]; 
        } 
        //Calculating Average waiting time 
        wait_avg=(float)total/n; total=0; 
        System.out.println("----------------------------------------------------------"); 
        System.out.println("\nProcess\t| Burst Time \t|Waiting Time\t|Turnaround Time |"); 
        System.out.println("----------------------------------------------------------"); for(i=0;i<n;i++) 
        { 
            tat[i]=burst_time[i]+waiting_time[i]; 
            //Calculating Turnaround Time 
            total+=tat[i]; 
            System.out.println("\n p"+process[i]+"\t|\t "+burst_time[i]+"\t|\t "+waiting_time[i]+"\t|\t"+tat[i]+"\t|\t");
            System.out.println("----------------------------------------------------------"); 
        }
        //Calculation of Average Turnaround Time 
        TAT_avg=(float)total/n; 
        System.out.println("\n\nAverage Waiting Time: "+wait_avg); 
        System.out.println("\nAverage Turnaround Time: "+TAT_avg); 
    }
}

########################################## ROUND ROBIN ##################################################################
import java.util.Scanner;
public class RR{
    public static void main(String args[]) { Scanner s = new Scanner(System.in); 
    int wtime[],btime[],rtime[],num,quantum,total; 
    wtime = new int[10]; btime = new int[10]; rtime = new int[10]; 
    System.out.print("Enter number of processes(MAX 10): "); 
    num = s.nextInt(); 
    System.out.print("Enter burst time"); 
    for(int i=0;i<num;i++) 
{ 
    System.out.print("\nP["+(i+1)+"]: "); 
    btime[i] = s.nextInt();
    rtime[i] = btime[i]; 
    wtime[i]=0; 
} 
    System.out.print("\n\nEnter quantum: "); 
    quantum = s.nextInt(); int rp = num; 
    int i=0; int time=0; 
    System.out.print("0"); wtime[0]=0; 
    while(rp!=0) 
    { 
        if(rtime[i]>quantum) 
        { 
            rtime[i]=rtime[i]-quantum; 
            System.out.print(" | P["+(i+1)+"] | \n"); 
            time+=quantum; 
            System.out.print(time); 
        } 
        else if(rtime[i]<=quantum && rtime[i]>0)
        {
            time+=rtime[i]; 
            rtime[i]=rtime[i]-rtime[i]; 
            System.out.print(" | P["+(i+1)+"] | \n"); rp--; 
            System.out.print(time); 
        } 
        i++; if(i==num) 
        { i=0; } 
    } 
}
}
########################################## PRIORITY BASED ##############################################################
import java.util.Scanner; 
public class priority {
    public static void main(String args[]) 
    {
        Scanner s = new Scanner(System.in);
        int x,n,p[],pp[],bt[],w[],t[],awt,atat,i;
        p = new int[10]; pp = new int[10]; bt = new int[10]; w = new int[10]; t = new int[10]; 
        //n is number of process 
        //pp is process priority 
        //w is wait time 
        // t is turnaround time 
        //awt is average waiting time 
        //atat is average turnaround time 
        //p is process 
        //bt is process burst time 
        System.out.print("Enter the number of process : "); n = s.nextInt(); 
        System.out.print("\n\t Enter CPU time---priority \n"); for(i=0;i<n;i++)
        { 
            System.out.print("\nProcess["+(i+1)+"]:"); 
            bt[i] = s.nextInt(); pp[i] = s.nextInt(); p[i]=i+1; 
        }
        //sorting on the basis of priority for(i=0;i<n-1;i++)
        { 
            for(int j=i+1;j<n;j++) 
            {
                if(pp[i]<pp[j])
                {
                    x=pp[i]; pp[i]=pp[j]; pp[j]=x; x=bt[i]; bt[i]=bt[j]; bt[j]=x; x=p[i]; p[i]=p[j]; p[j]=x; 
                }
            } 
        } 
        w[0]=0; awt=0; t[0]=bt[0]; atat=t[0]; 
        for(i=1;i<n;i++)
        {
            w[i]=t[i-1]; awt+=w[i]; t[i]=w[i]+bt[i]; atat+=t[i];
        } 
        //Displaying the process 
        System.out.println("-----------------------------------------------------------------------");
        System.out.print("\n\nProcess \t |Burst Time \t |Wait Time \t |Turn Time \t |Process Priority \n");
        System.out.println("-----------------------------------------------------------------------");
        for(i=0;i<n;i++)
        System.out.print("\n"+p[i]+"\t\t| "+bt[i]+"\t\t| "+w[i]+"\t\t|"+t[i]+"\t\t| "+pp[i]+"\n"); 
        System.out.println("-----------------------------------------------------------------------"); 
        awt/=n; atat/=n;
        System.out.print("\n Average Wait Time : "+awt);
        System.out.print("\n Average Turn Around Time : "+atat);
    }
}



















































###################################FIRST FIT
// Java implementation of First - Fit algorithm
class firstFit
{
    // Method to allocate memory to
    // blocks as per First fit algorithm
    static void firstFit(int blockSize[], int m,
                         int processSize[], int n)
    {
        // Stores block id of the
        // block allocated to a process
        int allocation[] = new int[n];
     
        // Initially no block is assigned to any process
        for (int i = 0; i < allocation.length; i++)
            allocation[i] = -1;
     
        // pick each process and find suitable blocks
        // according to its size ad assign to it
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if (blockSize[j] >= processSize[i])
                {
                    // allocate block j to p[i] process
                    allocation[i] = j;
     
                    // Reduce available memory in this block.
                    blockSize[j] -= processSize[i];
     
                    break;
                }
            }
        }
     
        System.out.println("\nProcess No.\tProcess Size\tBlock no.");
        for (int i = 0; i < n; i++)
        {
            System.out.print(" " + (i+1) + "\t\t" +
                             processSize[i] + "\t\t");
            if (allocation[i] != -1)
                System.out.print(allocation[i] + 1);
            else
                System.out.print("Not Allocated");
            System.out.println();
        }
    }
     
    // Driver Code
    public static void main(String[] args)
    {
        int blockSize[] = {200, 300, 200, 100, 400};
        int processSize[] = {112, 217, 312, 126};
        int m = blockSize.length;
        int n = processSize.length;
         
        firstFit(blockSize, m, processSize, n);
    }
}

############################### NEXT FIT

// Java program for next fit
// memory management algorithm
import java.util.Arrays;
 
public class nextFit {
 
// Function to allocate memory to blocks as per Next fit
// algorithm
    static void nextFit(int blockSize[], int m, int processSize[], int n) {
        // Stores block id of the block allocated to a
        // process
        int allocation[] = new int[n], j = 0;
 
        // Initially no block is assigned to any process
        Arrays.fill(allocation, -1);
 
        // pick each process and find suitable blocks
        // according to its size ad assign to it
        for (int i = 0; i < n; i++) {
 
            // Do not start from beginning
            int count =0;
            while (j < m) {
                count++;    //makes sure that for every process we traverse through entire array maximum once only.This avoids the problem of going into infinite loop if memory is not available
                if (blockSize[j] >= processSize[i]) {
 
                    // allocate block j to p[i] process
                    allocation[i] = j;
 
                    // Reduce available memory in this block.
                    blockSize[j] -= processSize[i];
 
                    break;
                }
 
                // mod m will help in traversing the blocks from
                // starting block after we reach the end.
                j = (j + 1) % m;
            }
        }
 
        System.out.print("\nProcess No.\tProcess Size\tBlock no.\n");
        for (int i = 0; i < n; i++) {
            System.out.print( i + 1 + "\t\t" + processSize[i]
                    + "\t\t");
            if (allocation[i] != -1) {
                System.out.print(allocation[i] + 1);
            } else {
                System.out.print("Not Allocated");
            }
            System.out.println("");
        }
    }
 
// Driver program
    static public void main(String[] args) {
        int blockSize[] = {5, 10, 25};
        int processSize[] = {10, 25, 5};
        int m = blockSize.length;
        int n = processSize.length;
        nextFit(blockSize, m, processSize, n);
    }
}
 
 
 #####################################BEST FIT
 // Java implementation of Best - Fit algorithm
  
public class bestFit
{
    // Method to allocate memory to blocks as per Best fit
    // algorithm
    static void bestFit(int blockSize[], int m, int processSize[], 
                                                     int n)
    {
        // Stores block id of the block allocated to a
        // process
        int allocation[] = new int[n];
       
        // Initially no block is assigned to any process
        for (int i = 0; i < allocation.length; i++)
            allocation[i] = -1;
       
     // pick each process and find suitable blocks
        // according to its size ad assign to it
        for (int i=0; i<n; i++)
        {
            // Find the best fit block for current process
            int bestIdx = -1;
            for (int j=0; j<m; j++)
            {
                if (blockSize[j] >= processSize[i])
                {
                    if (bestIdx == -1)
                        bestIdx = j;
                    else if (blockSize[bestIdx] > blockSize[j])
                        bestIdx = j;
                }
            }
       
            // If we could find a block for current process
            if (bestIdx != -1)
            {
                // allocate block j to p[i] process
                allocation[i] = bestIdx;
       
                // Reduce available memory in this block.
                blockSize[bestIdx] -= processSize[i];
            }
        }
       
        System.out.println("\nProcess No.\tProcess Size\tBlock no.");
        for (int i = 0; i < n; i++)
        {
            System.out.print("   " + (i+1) + "\t\t" + processSize[i] + "\t\t");
            if (allocation[i] != -1)
                System.out.print(allocation[i] + 1);
            else
                System.out.print("Not Allocated");
            System.out.println();
        }
    }
      
    // Driver Method
    public static void main(String[] args)
    {
         int blockSize[] = {200, 300, 200, 100, 400};
         int processSize[] = {112, 217, 312, 126};
         int m = blockSize.length;
         int n = processSize.length;
           
         bestFit(blockSize, m, processSize, n);
    }
}

#################################WORST FIT
// Java implementation of worst - Fit algorithm
 
public class worstFit
{
    // Method to allocate memory to blocks as per worst fit
    // algorithm
    static void worstFit(int blockSize[], int m, int processSize[],
                                                     int n)
    {
        // Stores block id of the block allocated to a
        // process
        int allocation[] = new int[n];
      
        // Initially no block is assigned to any process
        for (int i = 0; i < allocation.length; i++)
            allocation[i] = -1;
      
        // pick each process and find suitable blocks
        // according to its size ad assign to it
        for (int i=0; i<n; i++)
        {
            // Find the best fit block for current process
            int wstIdx = -1;
            for (int j=0; j<m; j++)
            {
                if (blockSize[j] >= processSize[i])
                {
                    if (wstIdx == -1)
                        wstIdx = j;
                    else if (blockSize[wstIdx] < blockSize[j])
                        wstIdx = j;
                }
            }
      
            // If we could find a block for current process
            if (wstIdx != -1)
            {
                // allocate block j to p[i] process
                allocation[i] = wstIdx;
      
                // Reduce available memory in this block.
                blockSize[wstIdx] -= processSize[i];
            }
        }
      
        System.out.println("\nProcess No.\tProcess Size\tBlock no.");
        for (int i = 0; i < n; i++)
        {
            System.out.print("   " + (i+1) + "\t\t" + processSize[i] + "\t\t");
            if (allocation[i] != -1)
                System.out.print(allocation[i] + 1);
            else
                System.out.print("Not Allocated");
            System.out.println();
        }
    }
     
    // Driver Method
    public static void main(String[] args)
    {
         int blockSize[] = {200, 300, 200, 100, 400};
         int processSize[] = {112, 217, 112, 426};
         int m = blockSize.length;
         int n = processSize.length;
          
         worstFit(blockSize, m, processSize, n);
    }
}































Imput:-
LOAD A
STORE B
MACRO 
ABC
LOAD p
SUB q
MEND
MACRO
ADD1 ARG
LOAD X
STORE ARG
MEND
MACRO
ADD5 A1, A2, A3
STORE A2
ADD1 5
ADD1 10
LOAD A1
LOAD A3
MEND
ABC
ADD5 D1, D2, D3
END






import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;
import java.util.LinkedHashMap;

public class macrop1 {

	public static void main(String[] args) throws IOException{
		BufferedReader br=new BufferedReader(new FileReader("input.asm"));
		
		FileWriter mnt=new FileWriter("mnt.txt");
		FileWriter mdt=new FileWriter("mdt.txt");
		FileWriter fvsppl=new FileWriter("fvsppl.txt");
		FileWriter avsppl=new FileWriter("avsppl.txt");
		FileWriter pnt=new FileWriter("pntab.txt");
		FileWriter ir=new FileWriter("intermediate.txt");
		LinkedHashMap<String, Integer> pntab=new LinkedHashMap<>();
		String line;
		String Macroname = null;
		int mdtp=1,kpdtp=0,paramNo=1,pp=0,kp=0,flag=0;
		while((line=br.readLine())!=null)
		{
			
			String parts[]=line.split("\\s+");
			if(parts[0].equalsIgnoreCase("MACRO"))
			{
				flag=1;
				line=br.readLine();
				parts=line.split("\\s+");
				Macroname=parts[0];
				if(parts.length<=1)
				{
					mnt.write(parts[0]+"\t"+pp+"\t"+"\t"+mdtp+"\n");
					continue;
				}
				for(int i=1;i<parts.length;i++) //processing of parameters
				{
					parts[i]=parts[i].replaceAll("[&,]", "");
					
					fvsppl.write(parts[0]+"\n"+"------------------"+"\n"+"\n");
					avsppl.write(parts[0]+"\n"+"------------------"+"\n"+"\n");
					if(parts[i].contains("="))
					{
						++kp;
						String keywordParam[]=parts[i].split("=");
						pntab.put(keywordParam[0], paramNo++);
			
					}
					else
					{
						pntab.put(parts[i], paramNo++);
						pp++;
						fvsppl.write(parts[i]+"\t\t"+"#"+i+"\n"+"\n"+"\n");
						avsppl.write("\t\t"+"#"+i+"\n"+"\n"+"\n");
					}
				}
				mnt.write(parts[0]+"\t"+pp+"\t"+"\t"+mdtp+"\t"+"\n");
				//fvsppl.write(parts[0]+"\n"+"\n"+"\n"+"\n"+"\n");
				kpdtp=kpdtp+kp;
				//System.out.println("KP="+kp);
				
				
			}
			else if(parts[0].equalsIgnoreCase("MEND"))
			{
				mdt.write(line+"\n");
				flag=kp=pp=0;
				mdtp++;
				paramNo=1;
				pnt.write(Macroname+":\t");
				Iterator<String> itr=pntab.keySet().iterator();
				while(itr.hasNext())
				{
					pnt.write(itr.next()+"\t");
				}
				pnt.write("\n");
				pntab.clear();
			}
			else if(flag==1)
			{
				for(int i=0;i<parts.length;i++)
				{
					if(parts[i].contains("&"))
					{
						parts[i]=parts[i].replaceAll("[&,]", "");
						mdt.write("(P,"+pntab.get(parts[i])+")\t");
						fvsppl.write(parts[i]+"\t\t"+"#"+i+"\n"+"\n"+"\n");
					}
					else
					{
						mdt.write(parts[i]+"\t");
					}
				}
				mdt.write("\n");
				mdtp++;
			}
			else
			{
				ir.write(line+"\n");
			}
		}
		br.close();
		mdt.close();
		mnt.close();
		ir.close();
		pnt.close();
		fvsppl.close();
		avsppl.close();
		System.out.println("MAcro PAss1 Processing done."
				+ "Check all outputs, "
				+ "--------thnak you------ :)");
	}

}

****************************************************************************************************************************************



























PASS 2
#################################### INTERMEDIATE FILE #################################################
###################################### create intermediate file named "intermediate.txt"  ##########################  
(AD,01)(C,200)
(IS,04)(1)(L,1)
(IS,05)(1)(S,1)
(IS,04)(1)(S,1)
(IS,04)(3)(S,3)
(IS,01)(3)(L,2)
(IS,07)(6)(S,4)
(DL,01)(C,5)
(DL,01)(C,1)
(IS,02)(1)(L,3)
(IS,07)(1)(S,5)
(IS,00)
(AD,03)(S,2)+2
(IS,03)(3)(S,3)
(AD,03)(S,6)+1
(DL,02)(C,1)
(DL,02)(C,1)
(AD,02)
(DL,01)(C,1)

############################ SYMTAB FILE ###################################################################
###################################### create symtab file named "symtab.txt" ##########################  
A   211   1
LOOP    202   1
B   212   1
NEXT    208   1
BACK    202   1
LAST    210   1

############################ LITTAB FILE ###################################################################
###################################### create littab file named "littab.txt" ##########################  
5		206
1		207
1		213

################################## CODE ###################################################################
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;

public class Pass2 {
	public static void main(String[] Args) throws IOException{
		 BufferedReader b1 = new BufferedReader(new FileReader("intermediate.txt"));
	     BufferedReader b2 = new BufferedReader(new FileReader("symtab.txt"));
	     BufferedReader b3 = new BufferedReader(new FileReader("littab.txt"));
	     FileWriter f1 = new FileWriter("Pass2.txt");
	     HashMap<Integer, String> symSymbol = new HashMap<Integer, String>();
	     HashMap<Integer, String> litSymbol = new HashMap<Integer, String>();
	     HashMap<Integer, String> litAddr = new HashMap<Integer, String>();
	     String s;
	     int symtabPointer=1,littabPointer=1,offset;
	     while((s=b2.readLine())!=null){
	    	 String word[]=s.split("\t\t\t");
	    	 symSymbol.put(symtabPointer++,word[1]);
	     }
	     while((s=b3.readLine())!=null){
	    	 String word[]=s.split("\t\t");
	    	 litSymbol.put(littabPointer,word[0]);
	    	 litAddr.put(littabPointer++,word[1]);
	     }
	     while((s=b1.readLine())!=null){
	    	 if(s.substring(1,6).compareToIgnoreCase("IS,00")==0){
	    		 f1.write("+ 00 0 000\n");
	    	 }
	    	 else if(s.substring(1,3).compareToIgnoreCase("IS")==0){
	    		 f1.write("+ "+s.substring(4,6)+" ");
	    		 if(s.charAt(9)==')'){
	    			 f1.write(s.charAt(8)+" ");
	    			 offset=3;
	    		 }
	    		 else{
	    			 f1.write("0 ");
	    			 offset=0;
	    		 }
	    		 if(s.charAt(8+offset)=='S')
    				 f1.write(symSymbol.get(Integer.parseInt(s.substring(10+offset,s.length()-1)))+"\n");
    			 else
    	 			 f1.write(litAddr.get(Integer.parseInt(s.substring(10+offset,s.length()-1)))+"\n");
    	   	} 
	    	 else if(s.substring(1,6).compareToIgnoreCase("DL,01")==0){
	    		 String s1=s.substring(10,s.length()-1),s2="";
	    		 for(int i=0;i<3-s1.length();i++)
	    			 s2+="0";
	    		 s2+=s1;
	    		 f1.write("+ 00 0 "+s2+"\n");
	    	 }
	    	 else{
	    		 f1.write("\n");
	    	 }
	     }
	     f1.close();
	     b1.close();
	     b2.close();
	     b3.close();
	}
}

























/*****************************************************TIKINTER******************************************************************************************************/





from tkinter import *
parent = Tk()
parent.geometry("500x200")
name = Button(parent,text = "Name",bg='pink').grid(row = 0, column =
0)
e1 = Entry(parent).grid(row = 0, column = 1)
password = Button(parent,text = "Password",bg='pink').grid(row = 1,
column = 0)
e2 = Entry(parent).grid(row = 1, column = 1)
submit = Button(parent, text = "Submit",bg='blue',
fg='white',activebackground='pink').grid( row = 5, column = 1)
parent.mainloop()





